% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hello.R
\name{shinyOptions}
\alias{shinyOptions}
\alias{shiny-options}
\title{Get or set Shiny options}
\usage{
shinyOptions(...)
}
\arguments{
\item{...}{Options to set, with the form \code{name = value}.}
}
\description{
\code{getShinyOption()} retrieves the value of a Shiny option. \code{shinyOptions()}
sets the value of Shiny options; it can also be used to return a list of all
currently-set Shiny options.
}
\section{Scope}{

There is a global option set which is available by default. When a Shiny
application is run with \code{\link[=runApp]{runApp()}}, that option set is duplicated and the
new option set is available for getting or setting values. If options
are set from \code{global.R}, \code{app.R}, \code{ui.R}, or \code{server.R}, or if they are set
from inside the server function, then the options will be scoped to the
application. When the application exits, the new option set is discarded and
the global option set is restored.
}

\section{Options}{

There are a number of global options that affect Shiny's behavior. These can
be set globally with \code{options()} or locally (for a single app) with
\code{shinyOptions()}.

\describe{
\item{shiny.autoreload (defaults to \code{FALSE})}{If \code{TRUE} when a Shiny app is launched, the
app directory will be continually monitored for changes to files that
have the extensions: r, htm, html, js, css, png, jpg, jpeg, gif. If any
changes are detected, all connected Shiny sessions are reloaded. This
allows for fast feedback loops when tweaking Shiny UI.\preformatted{Since monitoring for changes is expensive (we simply poll for last
modified times), this feature is intended only for development.

You can customize the file patterns Shiny will monitor by setting the
shiny.autoreload.pattern option. For example, to monitor only ui.R:
`options(shiny.autoreload.pattern = glob2rx("ui.R"))`

The default polling interval is 500 milliseconds. You can change this
by setting e.g. `options(shiny.autoreload.interval = 2000)` (every
two seconds).\}
}

\item{shiny.deprecation.messages (defaults to \code{TRUE})}{This controls whether messages for
deprecated functions in Shiny will be printed. See
\code{\link[=shinyDeprecated]{shinyDeprecated()}} for more information.}
}
}

\examples{
\dontrun{
shinyOptions(myOption = 10)
getShinyOption("myOption")
}
}
